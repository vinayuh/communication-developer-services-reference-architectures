# Amazon Pinpoint 2-way SMS & recommendations
# author: vinayuj@

AWSTemplateFormatVersion: "2010-09-09"
Description: "Pinpoint 2-way SMS & recommendations"

Parameters:

  CodeS3Bucket:
    Type: String
    Default: pinpointreinventaiml-code
    Description: Specify S3 bucket that contains Lambda code.
  PinpointProjectId:
    Type: String
    Default: Project ID here
    Description: Specify the Pinpoint project ID that you created earlier.
  BotAlias:
    Type: String
    Default: Bot Alias here
    Description: Specify the Bot Alias from Lex that you created earlier.
  BotId:
    Type: String
    Default: Bot ID here
    Description: Specify the BotID from Lex that you created earlier.
  OriginationNumber:
    Type: String
    Default: +1214xxxxxx2
    Description: Specify the origination phone number that you created earlier.  

Resources:

    LambdaOrderValidationRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"

            Policies:
                -
                    PolicyName: "LambdaOrderValidationPolicy"
                    PolicyDocument: 
                        {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "PinpointMessaging",
                                    "Effect": "Allow",
                                    "Action": "mobiletargeting:*",
                                    "Resource": !Sub "arn:aws:mobiletargeting:*:${AWS::AccountId}:apps/*"
                                },
                                {
                                    "Sid": "DynamoTable",
                                    "Effect": "Allow",
                                    "Action": "dynamodb:GetItem",
                                    "Resource": !GetAtt DynamoDBTable.Arn
                                }
                                ]
                        }

    LambdaLexIntegrationRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"

            Policies:
                -
                    PolicyName: "LambdaLexIntegrationPolicy"
                    PolicyDocument: 
                        {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Logs",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:CreateLogGroup",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Sid": "Pinpoint",
                                    "Effect": "Allow",
                                    "Action": [
                                        "mobiletargeting:SendMessages"
                                    ],
                                    "Resource": [
                                        !Sub "arn:aws:mobiletargeting:*:${AWS::AccountId}:apps/*"
                                    ]
                                },
                                {
                                    "Sid": "Lex",
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:PostContent",
                                        "lex:PostText",
                                        "lex:RecognizeText"
                                    ],
                                    "Resource": [
                                        !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:OrderStatus"
                                    ]
                                }
                            ]
                        }


#DynamoDB Table

    DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "Order_Num"
                AttributeType: "S"
            TableName: "OrderStatus"
            KeySchema: 
              - 
                AttributeName: "Order_Num"
                KeyType: "HASH"
            ProvisionedThroughput: 
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    ApplicationAutoScalingScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: 10
            MinCapacity: 1
            ResourceId: !Sub "table/${DynamoDBTable}"
            RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable"
            ScalableDimension: "dynamodb:table:WriteCapacityUnits"
            ServiceNamespace: "dynamodb"
            SuspendedState: 
                DynamicScalingInSuspended: false
                DynamicScalingOutSuspended: false
                ScheduledScalingSuspended: false

#Lambda Functions

    LambdaFunctionLexIntegration:
        Type: "AWS::Lambda::Function"
        Properties:
            Environment: 
                Variables: 
                    PinpointApplicationId: !Ref PinpointProjectId
                    BotAlias: !Ref BotAlias
                    OriginationNumber: !Ref OriginationNumber
                    BotId: !Ref BotId
                    Region: !Ref AWS::Region
            Handler: "index.handler"
            Architectures: 
              - "x86_64"
            Code:
                S3Bucket:
                    Ref: CodeS3Bucket
                S3Key: "lambda/LexIntegration.zip"
            Role: !GetAtt LambdaLexIntegrationRole.Arn
            Runtime: "nodejs16.x"
            Timeout: 60
            TracingConfig: 
                Mode: "PassThrough"

    LambdaFunctionOrderValidation:
        Type: "AWS::Lambda::Function"
        Properties:
            Environment: 
                Variables: 
                    applicationId: !Ref PinpointProjectId
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code:
                S3Bucket:
                    Ref: CodeS3Bucket
                S3Key: "lambda/RE_Order_Validation.zip"
            Role: !GetAtt LambdaOrderValidationRole.Arn 
            Runtime: "python3.9"
            Timeout: 60
            TracingConfig: 
                Mode: "PassThrough"

#SNS Topic

    SNSTopicTwoWaySMS:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: "LexPinpointIntegrationDemo"
            KmsMasterKeyId: alias/aws/sns

    SNSTopicPolicy:
        Type: "AWS::SNS::TopicPolicy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Id\":\"__default_policy_ID\",\"Statement\":[{\"Sid\":\"__default_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:GetTopicAttributes\",\"SNS:SetTopicAttributes\",\"SNS:AddPermission\",\"SNS:RemovePermission\",\"SNS:DeleteTopic\",\"SNS:Subscribe\",\"SNS:ListSubscriptionsByTopic\",\"SNS:Publish\"],\"Resource\":\"${SNSTopicTwoWaySMS}\",\"Condition\":{\"StringEquals\":{\"AWS:SourceOwner\":\"${AWS::AccountId}\"}}},{\"Sid\":\"PinpointPublish\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"mobile.amazonaws.com\"},\"Action\":\"sns:Publish\",\"Resource\":\"${SNSTopicTwoWaySMS}\"}]}"
            Topics: 
              - !Ref SNSTopicTwoWaySMS

    SNSSubscription:
        Type: "AWS::SNS::Subscription"
        Properties:
            TopicArn: !Ref SNSTopicTwoWaySMS
            Endpoint: !GetAtt LambdaFunctionLexIntegration.Arn
            Protocol: "lambda"
            Region: !Ref AWS::Region
